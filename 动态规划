public class Main1
{
    public static void main(String[] args)
    {
        int[] w = {1,4,3}; //物品的重量
        int[] val = {1500,3000,2000};  //物品的价值
        int m = 4; //背包的容量
        int n = val.length; //物品的个数
        //创建二维数组
        //v[i][j]表示前i个物品中能够装入容量为j的背包中的最大价值
        int[][] v = new int[n+1][m+1];
        //初始化第一行和第一列,不做处理默认为0
        //为了记录放入背包的组合情况，开辟一个二维数组
        int[][] path = new int[n+1][m+1];
        //根据公式做相应的动态处理
        for(int i = 1;i <= n;i++)
        {
            for(int j = 1;j <= m;j++)
            {
                if(w[i-1] > j)  //注意是w[i-1]
                {
                    //当要加入的物品重量大于当前背包容量时，使用前i-1个物品中最大价值
                    v[i][j] = v[i-1][j];
                }
                else
                {
                     //v[i][j] = Math.max(v[i-1][j],(val[i-1]+v[i-1][j-w[i-1]]));//注意是val[i-1],w[i-1]
                    // 上面只能找到最大价值的组合，但是不能明确组合中具体是什么
                    //需要开辟一个数组来进行记录
                    if(v[i-1][j] < val[i-1]+v[i-1][j-w[i-1]])
                    {
                        v[i][j] = val[i-1]+v[i-1][j-w[i-1]];
                        path[i][j] = 1;
                    }
                    else
                    {
                        v[i][j] = v[i-1][j];
                    }
                }
            }
        }
        //输出表格
        for(int i = 0;i < v.length;i++)
        {
            for(int j = 0;j < v[i].length;j++)
            {
                System.out.print(v[i][j] + " ");
            }
            System.out.println();
        }
        //输出最终的组合，找最后一个path为1的组合
        int i = path.length-1;
        int j = path[0].length-1;
        while(i > 0 && j > 0)
        {
            if(path[i][j] == 1)
            {
                System.out.printf("第%d个商品放入背包\n",i);
                j -= w[i-1];
            }
            i--; //商品不能重复
        }
    }
}
